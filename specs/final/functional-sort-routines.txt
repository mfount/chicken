Insertion sort:
- Procedure (insert n t): 
	takes input an list t where the last n-1 elements are sorted
	returns list t' where last n elts are sorted, by inserting 1st element 

Proof: we need to prove that. We have the lemmas set up/ the proof split into steps.

- Insertion sort:
	takes input a list t_1
	run (insert 0 t_{n-1}), (insert 1 t_{n-2}), ..., (insert {n-1} t_{0})
	where t_i is the result of (insertion n - i t_{i-1})

Mergesort:
- Procedure (merge t s): 
	takes input lists t, s that are sorted
	returns an array that is s and t merged together (and sorted)

- Merge sort: 
	takes input a list t
	calls itself recursively on each half of the list, then calls merge.

Heapsort:
- Procedure (heapify t):
	takes input a list t
	returns a heap data structure with elements the element of the list

- Procedure (heapsort_step h t):
	takes as input a heap (a min-heap) h and a list t
	returns a new heap h' and new list t' where we moved the min element
	from the heap h to the beginning of t.

- Heap sort:
	takes as input a list t
	runs heapify on t
	then runs heapsort_step until the heap is empty.



Simple timsort:
- Procedure (runs t):
	takes as input a list t
	returns: consider a permutation of t where consecutive runs have length at least 64 (or some other constant, we'll see)
	then (runs t) returns a list of these runs

	Uses either insertion sort (original timsort) or heapsort (our modification) to sort the runs when necessary

- Procedure (merge_runs T)
	takes as input a list of lists T, as the output of (runs t). 
	returns a list of lists that represents the result of merging the runs following the timsort heuristic:
	the runs are put on a stack, and then if X, Y, Z are the lengths of the top 3 runs, the algorithm merges the runs
	until the invariant X > Y + Z, Y > Z is satisfied.
	
	stack can be done as a list or using dictionary type which is defined in Poly.v.

	Note that to prove this we'll have to put some more careful thought into everything! So at this point I'm not sure how
	it would work.
